(radix_sort
 (d_nth_TCC1 0
  (d_nth_TCC1-1 nil 3747583725 ("" (subtype-tcc) nil nil) nil nil))
 (d_nth_TCC2 0
  (d_nth_TCC2-1 nil 3747583725 ("" (termination-tcc) nil nil) nil nil))
 (n_digits_TCC1 0
  (n_digits_TCC1-1 nil 3747583725
   ("" (skeep)
    (("" (typepred "ndiv(n, 10)") (("" (assert) nil nil)) nil)) nil)
   nil nil))
 (d_digits_gt 0
  (t2
   "Não foi possível provar. Talvez o lema devesse ser maior ou igual, visto que quando o número é 10 ou 100 ... os valores são iguais de ambos os lados"
   3750507381
   ("" (measure-induct+ "n" ("n"))
    (("" (inst -1 "ndiv(x!1, 10)")
      (("" (expand "n_digits" 1)
        (("" (lift-if)
          (("" (split 1)
            (("1" (flatten)
              (("1" (expand ">")
                (("1" (expand "^")
                  (("1" (expand "expt")
                    (("1" (expand "expt") (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten 1)
              (("2" (split -1)
                (("1" (grind)
                  (("1" (typepred "ndiv(x!1, 10)")
                    (("1" (assert)
                      (("1" (hide -1)
                        (("1" (hide -1 1)
                          (("1" (grind)
                            (("1" (reveal -1)
                              (("1"
                                (grind)
                                (("1"
                                  (lemma "ndiv_lt")
                                  (("1"
                                    (inst -1 "10" "x!1")
                                    (("1"
                                      (typepred "ndiv(x!1, 10)")
                                      (("1"
                                        (typepred "rem(10)(x!1)")
                                        (("1"
                                          (hide -2 -4)
                                          (("1"
                                            (rewrite "ndiv_lt")
                                            (("1"
                                              (lemma "ndiv_lt")
                                              (("1"
                                                (inst -1 "10" "x!1")
                                                (("1"
                                                  (name-replace
                                                   "exponential"
                                                   "expt(10, n_digits(ndiv(x!1, 10)) - 1)")
                                                  (("1"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "ndiv(x!1, 10)")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (okay "quase la" 3750009306
   ("" (measure-induct+ "n" ("n"))
    (("" (inst -1 "ndiv(x!1, 10)")
      (("" (expand "n_digits" 1)
        (("" (lift-if)
          (("" (split 1)
            (("1" (flatten)
              (("1" (expand ">")
                (("1" (expand "^")
                  (("1" (expand "expt")
                    (("1" (expand "expt") (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten 1)
              (("2" (split -1)
                (("1" (grind)
                  (("1" (typepred "ndiv(x!1, 10)")
                    (("1" (assert)
                      (("1" (hide -1)
                        (("1" (hide -1 1)
                          (("1" (grind)
                            (("1" (reveal -1)
                              (("1"
                                (grind)
                                (("1"
                                  (lemma "ndiv_lt")
                                  (("1"
                                    (inst -1 "10" "x!1")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (grind)
                                        (("1"
                                          (expand ">")
                                          (("1"
                                            (grind)
                                            (("1"
                                              (reveal -3)
                                              (("1"
                                                (typepred
                                                 "rem(10)(x!1)")
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (postpone)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (typepred "ndiv(x!1, 10)")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (d_digits_gt-1 nil 3748097090
   ("" (measure-induct+ "n" ("n"))
    (("" (inst -1 "ndiv(x!1, 10)")
      (("" (expand "n_digits" 1)
        (("" (lift-if)
          (("" (split 1)
            (("1" (flatten)
              (("1" (expand ">")
                (("1" (expand "^")
                  (("1" (expand "expt")
                    (("1" (expand "expt") (("1" (propax) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (flatten 1)
              (("2" (split -1)
                (("1" (grind) (("1" (postpone) nil nil)) nil)
                 ("2" (typepred "ndiv(x!1, 10)")
                  (("2" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (rem_div_div 0
  (rem_div_div-1 nil 3748280946
   ("" (lemma "floor_div_prod")
    (("" (skeep)
      (("" (inst -1 "b" "a" "n")
        (("" (rewrite "commutative_mult")
          (("" (typepred "ndiv(n, a)")
            (("" (lemma " rem_floor")
              (("" (inst -1 "a" "n")
                (("" (case "ndiv(n,a) = floor(n/a)")
                  (("1" (replace -1 1)
                    (("1" (typepred "ndiv(n, a * b)")
                      (("1" (lemma " rem_floor")
                        (("1" (inst -1 "a * b" "n")
                          (("1"
                            (case "ndiv(n, a * b) = floor(n / (a * b))")
                            (("1" (replace -1 1)
                              (("1"
                                (typepred "ndiv(floor(n / a), b)")
                                (("1"
                                  (lemma " rem_floor")
                                  (("1"
                                    (inst -1 "b" "floor(n / a)")
                                    (("1"
                                      (case
                                       "ndiv(floor(n / a), b) = floor(floor(n / a) / b)")
                                      (("1" (assert) nil nil)
                                       ("2"
                                        (hide 2)
                                        (("2"
                                          (hide-all-but (-1 -2 1))
                                          (("2"
                                            (name-replace
                                             "rfna"
                                             "rem(b)(floor(n/a))")
                                            (("2"
                                              (name-replace
                                               "ffnab"
                                               "floor(floor(n / a) / b)")
                                              (("2"
                                                (name-replace
                                                 "nfnab"
                                                 "ndiv(floor(n / a), b)")
                                                (("2"
                                                  (replaces -1)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (rewrite
                                                       " both_sides_times2")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (hide-all-but (-1 -2 1))
                              (("2"
                                (name-replace "rabn" "rem(a * b)(n)")
                                (("2"
                                  (name-replace
                                   "fnab"
                                   "floor(n / (a * b))")
                                  (("2"
                                    (name-replace
                                     "nnab"
                                     "ndiv(n, a * b)")
                                    (("2"
                                      (replaces -1 -2)
                                      (("2"
                                        (assert)
                                        (("2"
                                          (rewrite
                                           " both_sides_times2")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-1 -2 1))
                    (("2" (name-replace "rabn" "rem(a)(n)")
                      (("2" (name-replace "fna" "floor(n/a)")
                        (("2" (name-replace "nna" "ndiv(n,a)")
                          (("2" (replaces -1 -2)
                            (("2" (assert)
                              (("2"
                                (rewrite " both_sides_times2")
                                nil
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((floor_div_prod formula-decl nil mod_lems "ints/")) shostak))
 (rem_b_j_rem_div_times_b_TCC1 0
  (rem_b_j_rem_div_times_b_TCC1-1 nil 3748252624
   ("" (skeep)
    (("" (typepred "rem(b)(n)")
      (("" (skeep)
        (("" (typepred "q")
          (("" (case-replace "rem(b)(n) = n - b * q")
            (("1" (assert) (("1" (grind) nil nil)) nil)
             ("2" (assert) nil nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil))
 (rem_b_j_rem_div_times_b_TCC2 0
  (rem_b_j_rem_div_times_b_TCC2-1 nil 3748252624
   ("" (subtype-tcc) nil nil) nil nil))
 (rem_b_j_rem_div_times_b_TCC3 0
  (rem_b_j_rem_div_times_b_TCC3-1 nil 3748252624
   ("" (subtype-tcc) nil nil) nil nil))
 (rem_b_j_rem_div_times_b 0
  (rem_b_j_rem_div_times_b-2 nil 3748390711
   ("" (skeep)
    (("" (typepred "rem(b)(n)")
      (("" (typepred "ndiv(n,b)")
        (("" (skeep)
          (("" (case "ndiv(n,b) = q")
            (("1" (case "ndiv(n - rem(b)(n), b) = q")
              (("1" (typepred "rem(b ^ d)((n - rem(b)(n)) / b)")
                (("1" (skeep)
                  (("1" (typepred "rem(b ^ (d + 1))(n - rem(b)(n))")
                    (("1" (skeep)
                      (("1"
                        (case "rem(b ^ (d + 1))(n - rem(b)(n)) = n - rem(b)(n) - (b ^ (1 + d)) * q!2")
                        (("1" (replace -1 1)
                          (("1"
                            (case "rem(b ^ d)((n - rem(b)(n)) / b) = (n - rem(b)(n)) / b - b ^ d * q!1")
                            (("1" (replace -1 1)
                              (("1"
                                (case-replace
                                 "((n - rem(b)(n)) / b - b ^ d * q!1) * b =  n - rem(b)(n) - (b ^ (1 + d)) * q!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (case "q!1 = q!2")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (typepred
                                         "ndiv(n - rem(b)(n), b ^ (d + 1))")
                                        (("2"
                                          (case
                                           "ndiv(n - rem(b)(n), b ^ (d + 1)) = q!2")
                                          (("1"
                                            (typepred
                                             "ndiv( (n - rem(b)(n)) / b, b ^ d)")
                                            (("1"
                                              (case
                                               "ndiv( (n - rem(b)(n)) / b, b ^ d) = q!1")
                                              (("1"
                                                (replace -1 1 rl)
                                                (("1"
                                                  (replace -3 1 rl)
                                                  (("1"
                                                    (case
                                                     "(n - rem(b)(n)) / b = ndiv(n - rem(b)(n), b)")
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (lemma
                                                         "rem_div_div")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "n - rem(b)(n)"
                                                           "b"
                                                           "b ^ d")
                                                          (("1"
                                                            (expand
                                                             " ^ "
                                                             1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "expt")
                                                              (("1"
                                                                (expand
                                                                 " ^ "
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -12 1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (name-replace
                                                 "nrb"
                                                 "(n - rem(b)(n)) / b")
                                                (("2"
                                                  (name-replace
                                                   "rbn"
                                                   "rem(b ^ d)(nrb)")
                                                  (("1"
                                                    (typepred "b ^ d")
                                                    (("1"
                                                      (replace -2 -11)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (rewrite
                                                           " both_sides_times2")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-1 -6 1))
                                            (("2"
                                              (name-replace
                                               "rr"
                                               "rem(b)(n)")
                                              (("2"
                                                (name-replace
                                                 "nd"
                                                 "ndiv(n - rr, b ^ (d + 1))")
                                                (("2"
                                                  (name-replace
                                                   "rn"
                                                   "rem(b ^ (1 + d))(n - rr)")
                                                  (("2"
                                                    (typepred
                                                     "b ^ (1 + d)")
                                                    (("2"
                                                      (name-replace
                                                       "bdp"
                                                       "b ^ (1 + d)")
                                                      (("2"
                                                        (grind)
                                                        (("2"
                                                          (rewrite
                                                           " both_sides_times2")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil)
                             ("2"
                              (name-replace "rrbd"
                               "rem(b ^ d)((n - rem(b)(n)) / b) ")
                              (("2"
                                (replace -5 1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (name-replace "rbdp"
                           "rem(b ^ (d + 1))(n - rem(b)(n))")
                          (("2" (replace -2 1) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (name-replace "rbn" "rem(b)(n)")
                  (("2" (replace -6 1) (("2" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (typepred "ndiv(n - rem(b)(n), b)")
                (("2" (rewrite "rem_diff2")
                  (("2" (rewrite "rem_zero")
                    (("2" (assert)
                      (("2"
                        (name-replace "nd" "ndiv(n - rem(b)(n), b)")
                        (("2" (name-replace "rr" "rem(b)(n)")
                          (("2" (hide-all-but (-1 -6 1))
                            (("2" (typepred "b")
                              (("2"
                                (replace -3 -2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (rewrite "both_sides_times2")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (typepred "b")
                (("2" (name-replace "rr" "rem(b)(n)")
                  (("2" (name-replace "nn" "ndiv(n,b)")
                    (("2" (grind)
                      (("2" (use " both_sides_times2")
                        (("2" (rewrite " both_sides_times2") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (rem_b_j_rem_div_times_b-1 nil 3748342637
   ("" (skeep)
    (("" (typepred "rem(b)(n)")
      (("" (typepred "ndiv(n,b)")
        (("" (skeep)
          (("" (case "ndiv(n,b) = q")
            (("1" (case "ndiv(n - rem(b)(n), b) = q")
              (("1" (typepred "rem(b ^ d)((n - rem(b)(n)) / b)")
                (("1" (skeep)
                  (("1" (typepred "rem(b ^ (d + 1))(n - rem(b)(n))")
                    (("1" (skeep)
                      (("1"
                        (case "rem(b ^ (d + 1))(n - rem(b)(n)) = n - rem(b)(n) - (b ^ (1 + d)) * q!2")
                        (("1" (replace -1 1)
                          (("1"
                            (case "rem(b ^ d)((n - rem(b)(n)) / b) = (n - rem(b)(n)) / b - b ^ d * q!1")
                            (("1" (replace -1 1)
                              (("1"
                                (case-replace
                                 "((n - rem(b)(n)) / b - b ^ d * q!1) * b =  n - rem(b)(n) - (b ^ (1 + d)) * q!1")
                                (("1"
                                  (assert)
                                  (("1"
                                    (case "q!1 = q!2")
                                    (("1" (assert) nil nil)
                                     ("2"
                                      (hide 2)
                                      (("2"
                                        (typepred
                                         "ndiv(n - rem(b)(n), b ^ (d + 1))")
                                        (("2"
                                          (case
                                           "ndiv(n - rem(b)(n), b ^ (d + 1)) = q!2")
                                          (("1"
                                            (typepred
                                             "ndiv( (n - rem(b)(n)) / b, b ^ d)")
                                            (("1"
                                              (case
                                               "ndiv( (n - rem(b)(n)) / b, b ^ d) = q!1")
                                              (("1"
                                                (replace -1 1 rl)
                                                (("1"
                                                  (replace -3 1 rl)
                                                  (("1"
                                                    (case
                                                     "(n - rem(b)(n)) / b = ndiv(n - rem(b)(n), b)")
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (lemma
                                                         "rem_div_div")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "n - rem(b)(n)"
                                                           "b"
                                                           "b ^ d")
                                                          (("1"
                                                            (expand
                                                             " ^ "
                                                             1
                                                             2)
                                                            (("1"
                                                              (expand
                                                               "expt")
                                                              (("1"
                                                                (expand
                                                                 " ^ "
                                                                 -1
                                                                 1)
                                                                (("1"
                                                                  (assert)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replace -12 1)
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (name-replace
                                                 "nrb"
                                                 "(n - rem(b)(n)) / b")
                                                (("2"
                                                  (name-replace
                                                   "rbn"
                                                   "rem(b ^ d)(nrb)")
                                                  (("1"
                                                    (typepred "b ^ d")
                                                    (("1"
                                                      (replace -2 -11)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (rewrite
                                                           " both_sides_times2")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide-all-but (-1 -6 1))
                                            (("2"
                                              (name-replace
                                               "rr"
                                               "rem(b)(n)")
                                              (("2"
                                                (name-replace
                                                 "nd"
                                                 "ndiv(n - rr, b ^ (d + 1))")
                                                (("2"
                                                  (name-replace
                                                   "rn"
                                                   "rem(b ^ (1 + d))(n - rr)")
                                                  (("2"
                                                    (typepred
                                                     "b ^ (1 + d)")
                                                    (("2"
                                                      (name-replace
                                                       "bdp"
                                                       "b ^ (1 + d)")
                                                      (("2"
                                                        (grind)
                                                        (("2"
                                                          (rewrite
                                                           " both_sides_times2")
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil)
                             ("2"
                              (name-replace "rrbd"
                               "rem(b ^ d)((n - rem(b)(n)) / b) ")
                              (("2"
                                (replace -5 1)
                                (("2" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2"
                          (name-replace "rbdp"
                           "rem(b ^ (d + 1))(n - rem(b)(n))")
                          (("2" (replace -2 1) (("2" (assert) nil nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (name-replace "rbn" "rem(b)(n)")
                  (("2" (replace -6 1) (("2" (assert) nil nil)) nil))
                  nil))
                nil)
               ("2" (typepred "ndiv(n - rem(b)(n), b)")
                (("2" (rewrite "rem_diff2")
                  (("2" (rewrite "rem_zero")
                    (("2" (assert)
                      (("2"
                        (name-replace "nd" "ndiv(n - rem(b)(n), b)")
                        (("2" (name-replace "rr" "rem(b)(n)")
                          (("2" (hide-all-but (-1 -6 1))
                            (("2" (typepred "b")
                              (("2"
                                (replace -3 -2)
                                (("2"
                                  (assert)
                                  (("2"
                                    (rewrite "both_sides_times2")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil)
             ("2" (hide 2)
              (("2" (typepred "b")
                (("2" (name-replace "rr" "rem(b)(n)")
                  (("2" (name-replace "nn" "ndiv(n,b)")
                    (("2" (grind)
                      (("2" (use " both_sides_times2")
                        (("2" (rewrite " both_sides_times2") nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (rem_b_j_rem_b 0
  (rem_b_j_rem_b-3 nil 3748390808
   ("" (skeep*)
    (("" (typepred "rem(b ^ d)(n)")
      (("" (typepred "rem(b ^ d)(n - rem(b)(n))")
        (("" (typepred "rem(b)(n)")
          (("" (skeep)
            (("" (skeep)
              (("" (skeep)
                (("" (case "rem(b ^ d)(n) = n - b ^ d * q!2")
                  (("1"
                    (case "rem(b ^ d)(n - rem(b)(n)) = n - rem(b)(n) -  b ^ d * q!1")
                    (("1" (replace -1 1)
                      (("1" (replace -2 1)
                        (("1" (assert)
                          (("1"
                            (case "ndiv(n-rem(b)(n),b^d)=ndiv(n,b^d)")
                            (("1"
                              (typepred "ndiv(n - rem(b)(n), b ^ d)")
                              (("1"
                                (typepred "ndiv(n, b ^ d)")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2"
                              (typepred "ndiv(n - rem(b)(n), b ^ d)")
                              (("2"
                                (typepred "ndiv(n, b ^ d)")
                                (("2"
                                  (hide-all-but (-3 -1 -6 1))
                                  (("2"
                                    (typepred "ndiv(n,b)")
                                    (("2"
                                      (case
                                       "n - rem(b)(n)=   b * ndiv(n, b)")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (case-replace
                                           "ndiv(b * ndiv(n, b), b ^ d) = ndiv( ndiv(n, b), b ^ (d - 1))")
                                          (("1"
                                            (typepred
                                             " ndiv(ndiv(n, b), b ^ (d - 1))")
                                            (("1"
                                              (lemma "rem_div_div")
                                              (("1"
                                                (inst
                                                 -1
                                                 "n"
                                                 "b"
                                                 "b ^ (d - 1)")
                                                (("1"
                                                  (replace -1 1 rl)
                                                  (("1"
                                                    (expand " ^ " 1)
                                                    (("1"
                                                      (expand
                                                       "expt"
                                                       1
                                                       2)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred
                                                   " b ^ (d - 1)")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred " b ^ (d - 1)")
                                              (("2"
                                                (assert)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (typepred
                                               "ndiv(ndiv(n, b), b ^ (d - 1))")
                                              (("1"
                                                (case
                                                 "ndiv(b * ndiv(n, b), b ^ d) =  (b * ndiv(n, b) - rem(b ^ d)(b * ndiv(n, b))) / b ^ d")
                                                (("1"
                                                  (replace -1 1)
                                                  (("1"
                                                    (case
                                                     " ndiv(ndiv(n, b), b ^ (d - 1)) =  (ndiv(n, b) - rem(b ^ (d - 1))(ndiv(n, b)) ) / b ^ (d -1)")
                                                    (("1"
                                                      (replace -1 1)
                                                      (("1"
                                                        (assert)
                                                        (("1"
                                                          (expand
                                                           " ^ "
                                                           1
                                                           2)
                                                          (("1"
                                                            (expand
                                                             " ^ "
                                                             1
                                                             3)
                                                            (("1"
                                                              (expand
                                                               "expt"
                                                               1
                                                               1)
                                                              (("1"
                                                                (lemma
                                                                 "div_div2")
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "b"
                                                                   "expt(b, d - 1)"
                                                                   "(b * ndiv(n, b) - rem(b ^ d)(b * ndiv(n, b)))")
                                                                  (("1"
                                                                    (replace
                                                                     -1
                                                                     1
                                                                     rl)
                                                                    (("1"
                                                                      (rewrite
                                                                       "both_sides_div1")
                                                                      (("1"
                                                                        (rewrite
                                                                         "div_cancel3")
                                                                        (("1"
                                                                          (lemma
                                                                           "div_cancel3")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "b"
                                                                             "(b * ndiv(n, b) - rem(b ^ d)(b * ndiv(n, b)))"
                                                                             "(ndiv(n, b) - rem(b ^ (d - 1))(ndiv(n, b)))")
                                                                            (("1"
                                                                              (prop)
                                                                              (("1"
                                                                                (hide
                                                                                 2
                                                                                 3)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "commutative_mult")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (inst
                                                                                       -1
                                                                                       "ndiv(n, b)"
                                                                                       "b")
                                                                                      (("1"
                                                                                        (assert)
                                                                                        (("1"
                                                                                          (replaces
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (case
                                                                                               "rem(b ^ d)(b * ndiv(n, b)) =
        (rem(b ^ (d - 1))(ndiv(n, b)) * b)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil)
                                                                                               ("2"
                                                                                                (hide
                                                                                                 2)
                                                                                                (("2"
                                                                                                  (lemma
                                                                                                   "rem_b_j_rem_div_times_b")
                                                                                                  (("2"
                                                                                                    (inst
                                                                                                     -1
                                                                                                     "n"
                                                                                                     "d - 1"
                                                                                                     "b")
                                                                                                    (("2"
                                                                                                      (assert)
                                                                                                      (("2"
                                                                                                        (case
                                                                                                         "(n - rem(b)(n)) / b = ndiv(n, b)")
                                                                                                        (("1"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (case
                                                                                                             "n - rem(b)(n) = b * ndiv(n, b)")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1
                                                                                                               -3)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil)
                                                                                                             ("2"
                                                                                                              (assert)
                                                                                                              nil
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil)
                                                                                                         ("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil)
                                                                             ("2"
                                                                              (typepred
                                                                               "b ^ (d - 1)")
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (assert)
                                                  nil
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (typepred " b ^ (d - 1)")
                                            (("3"
                                              (assert)
                                              (("3" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (rem_b_j_rem_b-2 nil 3748390751
   ("" (skeep*)
    (("" (typepred "rem(b ^ d)(n)")
      (("" (typepred "rem(b ^ d)(n - rem(b)(n))")
        (("" (typepred "rem(b)(n)")
          (("" (skeep)
            (("" (skeep)
              (("" (skeep)
                (("" (case "rem(b ^ d)(n) = n - b ^ d * q!2")
                  (("1"
                    (case "rem(b ^ d)(n - rem(b)(n)) = n - rem(b)(n) -  b ^ d * q!1")
                    (("1" (replace -1 1)
                      (("1" (replace -2 1)
                        (("1" (assert)
                          (("1"
                            (case "ndiv(n-rem(b)(n),b^d)=ndiv(n,b^d)")
                            (("1"
                              (typepred "ndiv(n - rem(b)(n), b ^ d)")
                              (("1"
                                (typepred "ndiv(n, b ^ d)")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2"
                              (typepred "ndiv(n - rem(b)(n), b ^ d)")
                              (("2"
                                (typepred "ndiv(n, b ^ d)")
                                (("2"
                                  (hide-all-but (-3 -1 -6 1))
                                  (("2"
                                    (typepred "ndiv(n,b)")
                                    (("2"
                                      (case
                                       "n - rem(b)(n)=   b * ndiv(n, b)")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (case-replace
                                           "ndiv(b * ndiv(n, b), b ^ d) = ndiv( ndiv(n, b), b ^ (d - 1))")
                                          (("1"
                                            (typepred
                                             " ndiv(ndiv(n, b), b ^ (d - 1))")
                                            (("1"
                                              (lemma "rem_div_div")
                                              (("1"
                                                (inst
                                                 -1
                                                 "n"
                                                 "b"
                                                 "b ^ (d - 1)")
                                                (("1"
                                                  (replace -1 1 rl)
                                                  (("1"
                                                    (expand " ^ " 1)
                                                    (("1"
                                                      (expand
                                                       "expt"
                                                       1
                                                       2)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred
                                                   " b ^ (d - 1)")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred " b ^ (d - 1)")
                                              (("2"
                                                (assert)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (typepred
                                               "ndiv(ndiv(n, b), b ^ (d - 1))")
                                              (("1" (postpone) nil nil)
                                               ("2"
                                                (postpone)
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (typepred " b ^ (d - 1)")
                                            (("3"
                                              (assert)
                                              (("3" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil nil)
  (rem_b_j_rem_b-1 nil 3748269049
   ("" (skeep*)
    (("" (typepred "rem(b ^ d)(n)")
      (("" (typepred "rem(b ^ d)(n - rem(b)(n))")
        (("" (typepred "rem(b)(n)")
          (("" (skeep)
            (("" (skeep)
              (("" (skeep)
                (("" (case "rem(b ^ d)(n) = n - b ^ d * q!2")
                  (("1"
                    (case "rem(b ^ d)(n - rem(b)(n)) = n - rem(b)(n) -  b ^ d * q!1")
                    (("1" (replace -1 1)
                      (("1" (replace -2 1)
                        (("1" (assert)
                          (("1"
                            (case "ndiv(n-rem(b)(n),b^d)=ndiv(n,b^d)")
                            (("1"
                              (typepred "ndiv(n - rem(b)(n), b ^ d)")
                              (("1"
                                (typepred "ndiv(n, b ^ d)")
                                (("1" (assert) nil nil))
                                nil))
                              nil)
                             ("2"
                              (typepred "ndiv(n - rem(b)(n), b ^ d)")
                              (("2"
                                (typepred "ndiv(n, b ^ d)")
                                (("2"
                                  (hide-all-but (-3 -1 -6 1))
                                  (("2"
                                    (typepred "ndiv(n,b)")
                                    (("2"
                                      (case
                                       "n - rem(b)(n)=   b * ndiv(n, b)")
                                      (("1"
                                        (replaces -1)
                                        (("1"
                                          (case-replace
                                           "ndiv(b * ndiv(n, b), b ^ d) = ndiv( ndiv(n, b), b ^ (d - 1))")
                                          (("1"
                                            (typepred
                                             " ndiv(ndiv(n, b), b ^ (d - 1))")
                                            (("1"
                                              (lemma "rem_div_div")
                                              (("1"
                                                (inst
                                                 -1
                                                 "n"
                                                 "b"
                                                 "b ^ (d - 1)")
                                                (("1"
                                                  (replace -1 1 rl)
                                                  (("1"
                                                    (expand " ^ " 1)
                                                    (("1"
                                                      (expand
                                                       "expt"
                                                       1
                                                       2)
                                                      (("1"
                                                        (propax)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred
                                                   " b ^ (d - 1)")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (typepred " b ^ (d - 1)")
                                              (("2"
                                                (assert)
                                                (("2" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (hide 2)
                                            (("2"
                                              (typepred
                                               "ndiv(ndiv(n, b), b ^ (d - 1))")
                                              (("1" (postpone) nil nil)
                                               ("2"
                                                (postpone)
                                                nil
                                                nil))
                                              nil))
                                            nil)
                                           ("3"
                                            (typepred " b ^ (d - 1)")
                                            (("3"
                                              (assert)
                                              (("3" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil)
                   ("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (d_exp_dec 0
  (d_exp_dec-1 nil 3748104043
   ("" (induct "d")
    (("1" (grind)
      (("1" (typepred "rem(1)(n!1)") (("1" (assert) nil nil)) nil))
      nil)
     ("2" (skeep)
      (("2" (skeep)
        (("2" (inst -1 "ndiv(n,10)")
          (("2" (expand "d_nth" 1)
            (("2" (case-replace "ndiv(n, 10) = (n - rem(10)(n))/10")
              (("1" (lemma "rem_b_j_rem_div_times_b")
                (("1" (copy -1)
                  (("1" (inst -1 "n" "j" "10")
                    (("1" (inst -2 "n" "j + 1" "10")
                      (("1" (lemma " rem_b_j_rem_b")
                        (("1" (copy -1)
                          (("1" (inst -2 "n" "j + 1" "10")
                            (("1" (inst -1 "n" "j + 2" "10")
                              (("1"
                                (replaces -1)
                                (("1"
                                  (replaces -1)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (replaces -1 :dir rl)
                                      (("1"
                                        (replaces -1 :dir rl)
                                        (("1" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (typepred "ndiv(n,10)")
                (("2" (typepred "rem(10)(n)") (("2" (assert) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak))
 (max_digits_TCC1 0
  (max_digits_TCC1-1 nil 3747583725 ("" (grind) nil nil)
   ((length def-decl "nat" list_props nil)) nil))
 (max_digits_TCC2 0
  (max_digits_TCC2-1 nil 3747583725 ("" (grind) nil nil)
   ((length def-decl "nat" list_props nil)) nil))
 (max_digits_TCC3 0
  (max_digits_TCC3-1 nil 3747583725
   ("" (grind)
    (("" (expand "length" -2)
      (("" (expand "length" 1) (("" (grind) nil nil)) nil)) nil))
    nil)
   ((length def-decl "nat" list_props nil)) nil))
 (max_digits_TCC4 0
  (max_digits_TCC4-1 nil 3747583725
   ("" (skeep)
    (("" (typepred "l")
      (("" (hide -1)
        (("" (grind)
          (("" (expand "length" 2 2) (("" (grind) nil nil)) nil)) nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)) nil))
 (merge_TCC1 0
  (merge_TCC1-1 nil 3747583725 ("" (subtype-tcc) nil nil) nil nil))
 (merge_TCC2 0
  (merge_TCC2-1 nil 3747583725 ("" (subtype-tcc) nil nil) nil nil))
 (merge_TCC3 0
  (merge_TCC3-1 nil 3747583725 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)) nil))
 (merge_TCC4 0
  (merge_TCC4-1 nil 3747583725 ("" (termination-tcc) nil nil)
   ((length def-decl "nat" list_props nil)) nil))
 (merge_sort_TCC1 0
  (merge_sort_TCC1-1 nil 3747583725 ("" (subtype-tcc) nil nil) nil
   nil))
 (merge_sort_TCC2 0
  (merge_sort_TCC2-1 nil 3747583725
   ("" (skeep)
    (("" (rewrite "length_prefix")
      (("" (use "merge_sort_TCC1")
        (("" (assert) (("" (grind) nil nil)) nil)) nil))
      nil))
    nil)
   ((length_prefix formula-decl nil sorting nil)
    (length def-decl "nat" list_props nil))
   nil))
 (merge_sort_TCC3 0
  (merge_sort_TCC3-1 nil 3747583725
   ("" (skeep)
    (("" (rewrite "length_suffix") (("" (grind) nil nil)) nil)) nil)
   ((length_suffix formula-decl nil sorting nil)
    (length def-decl "nat" list_props nil))
   nil))
 (radixsort_TCC1 0
  (radixsort_TCC1-1 nil 3747583725 ("" (subtype-tcc) nil nil) nil nil))
 (radixsort_TCC2 0
  (radixsort_TCC2-1 nil 3747583725 ("" (subtype-tcc) nil nil) nil nil))
 (radixsort_TCC3 0
  (radixsort_TCC3-1 nil 3747583725 ("" (termination-tcc) nil nil) nil
   nil))
 (radixsort_TCC4 0
  (radixsort_TCC4-1 nil 3747583725 ("" (subtype-tcc) nil nil) nil nil))
 (radixsort_TCC5 0
  (radixsort_TCC5-1 nil 3747583725 ("" (subtype-tcc) nil nil) nil nil))
 (merge_length 0
  (merge_length-1 nil 3747589763
   ("" (measure-induct+ "length(l1) + length(l2)" ("l1" "l2"))
    (("1" (skeep)
      (("1" (expand "merge" 1)
        (("1" (lift-if)
          (("1" (prop)
            (("1" (grind) nil nil)
             ("2" (lemma "append_null")
              (("2" (inst -1 "x!1") (("2" (grind) nil nil)) nil)) nil)
             ("3" (expand "length" 1 1)
              (("3" (inst -2 "cdr(x!1)" "x!2") (("3" (grind) nil nil))
                nil))
              nil)
             ("4" (expand "length" 2 1)
              (("4" (inst -1 "x!1" "cdr(x!2)")
                (("4" (inst -1 "d") (("4" (grind) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (expand "well_founded?")
      (("2" (skeep)
        (("2" (inst -1 "p")
          (("2" (assert) (("2" (prop) (("2" (grind) nil nil)) nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((append_null formula-decl nil list_props nil)
    (append def-decl "list[T]" list_props nil)
    (length def-decl "nat" list_props nil))
   shostak))
 (merge_sort_length 0
  (merge_sort_length-1 nil 3747590599
   ("" (measure-induct+ "length(l)" ("l"))
    (("1" (skeep)
      (("1" (expand "merge_sort" 1)
        (("1" (lift-if)
          (("1" (prop)
            (("1" (inst-cp -1 "prefix(x!1, floor(length(x!1) / 2))")
              (("1" (inst -1 "suffix(x!1, floor(length(x!1) / 2))")
                (("1" (inst -1 "d")
                  (("1" (inst -2 "d")
                    (("1" (split)
                      (("1" (split)
                        (("1" (rewrite "merge_length")
                          (("1" (rewrite "length_suffix")
                            (("1" (rewrite "length_prefix")
                              (("1" (assert) nil nil)) nil))
                            nil))
                          nil)
                         ("2" (rewrite "length_prefix")
                          (("2" (grind) nil nil)) nil))
                        nil)
                       ("2" (rewrite "length_suffix")
                        (("2" (grind) nil nil)) nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (expand "well_founded?")
      (("2" (skeep) (("2" (inst -1 "p") (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((prefix def-decl "list[nat]" sorting nil)
    (length_prefix formula-decl nil sorting nil)
    (length_suffix formula-decl nil sorting nil)
    (suffix def-decl "list[nat]" sorting nil)
    (length def-decl "nat" list_props nil))
   shostak))
 (merge_permutes 0
  (try3b4 "Testing another way to solve branch 4" 3750422333
   ("" (measure-induct+ "length(l1)+length(l2)" ("l1" "l2"))
    (("" (skeep)
      (("" (expand "merge" 1)
        (("" (lift-if)
          (("" (prop)
            (("1" (expand "permutations") (("1" (propax) nil nil)) nil)
             ("2" (expand "permutations") (("2" (propax) nil nil)) nil)
             ("3" (expand append 1)
              (("3" (lift-if)
                (("3" (prop)
                  (("3" (lemma cons_of_perm_is_permutation)
                    (("3" (grind) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("4" (lemma "merge_length")
              (("4" (inst -2 "x!1" "cdr(x!2)")
                (("4" (expand "permutations")
                  (("4" (skeep)
                    (("4" (lemma "occurrences_of_app")
                      (("4" (assert)
                        (("4" (inst -1 "x!1" "x!2" "x")
                          (("4" (inst -3 "d")
                            (("4" (split -3)
                              (("1"
                                (inst -1 "x")
                                (("1"
                                  (assert)
                                  (("1"
                                    (hide 3 4)
                                    (("1"
                                      (hide -3)
                                      (("1"
                                        (hide 1)
                                        (("1"
                                          (reveal -4)
                                          (("1"
                                            (inst
                                             -1
                                             "x!1"
                                             "cdr(x!2)"
                                             "x")
                                            (("1" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (expand "length" 1)
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (prop)
                                    (("1" (grind) nil nil)
                                     ("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (append def-decl "list[T]" list_props nil)
    (permutations const-decl "bool" sorting nil)
    (cons_of_perm_is_permutation formula-decl nil sorting nil)
    (occurrences def-decl "nat" sorting nil)
    (occurrences_of_app formula-decl nil sorting nil))
   shostak)
  (merge_permutes-1 nil 3747591401
   ("" (measure-induct+ "length(l1)+length(l2)" ("l1" "l2"))
    (("" (skeep)
      (("" (expand "merge" 1)
        (("" (lift-if)
          (("" (prop)
            (("1" (expand "permutations") (("1" (propax) nil nil)) nil)
             ("2" (expand "permutations") (("2" (propax) nil nil)) nil)
             ("3" (expand append 1)
              (("3" (lift-if)
                (("3" (prop)
                  (("3" (lemma cons_of_perm_is_permutation)
                    (("3" (grind) nil nil)) nil))
                  nil))
                nil))
              nil)
             ("4" (lemma "merge_length")
              (("4" (inst -2 "x!1" "cdr(x!2)")
                (("4" (expand "append")
                  (("4" (lift-if)
                    (("4" (prop) (("4" (postpone) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((occurrences def-decl "nat" sorting nil)
    (append_null formula-decl nil list_props nil)
    (occurrences_of_app formula-decl nil sorting nil)
    (permutations const-decl "bool" sorting nil)
    (append def-decl "list[T]" list_props nil)
    (length def-decl "nat" list_props nil))
   shostak))
 (merge_sort_permutes 0
  (merge_sort_permutes-1 nil 3747664130
   ("" (measure-induct+ "length(l)" "l")
    (("1" (expand "permutations")
      (("1" (skeep*)
        (("1" (expand "merge_sort" 1)
          (("1" (lift-if)
            (("1" (assert)
              (("1" (prop)
                (("1"
                  (case "x!1= append(prefix(x!1, floor(length(x!1) / 2)), suffix(x!1, floor(length(x!1) / 2)))")
                  (("1"
                    (case "occurrences(x!1)(x) = occurrences(append(prefix(x!1, floor(length(x!1) / 2)),
              suffix(x!1, floor(length(x!1) / 2))))(x)")
                    (("1" (replaces -1)
                      (("1" (rewrite "occurrences_of_app")
                        (("1" (lemma "merge_permutes")
                          (("1"
                            (inst -1
                             "merge_sort(prefix(x!1, floor(length(x!1) / 2)),
                                    d)"
                             "merge_sort(suffix(x!1, floor(length(x!1) / 2)),
                                    d)" "d")
                            (("1" (expand "permutations")
                              (("1"
                                (inst?)
                                (("1"
                                  (rewrite "occurrences_of_app")
                                  (("1"
                                    (replaces -1 :dir rl)
                                    (("1"
                                      (inst-cp
                                       -2
                                       "prefix(x!1, floor(length(x!1) / 2))")
                                      (("1"
                                        (inst
                                         -2
                                         "suffix(x!1, floor(length(x!1) / 2))")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (prop)
                                            (("1"
                                              (inst? -3)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (inst?)
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (rewrite
                                                   "length_prefix")
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (rewrite "length_suffix")
                                              (("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (assert) nil nil))
                    nil)
                   ("2" (rewrite "app_prefix_suffix") nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (expand "well_founded?")
      (("2" (skeep) (("2" (inst -1 "p") (("2" (grind) nil nil)) nil))
        nil))
      nil))
    nil)
   ((length def-decl "nat" list_props nil)
    (permutations const-decl "bool" sorting nil)
    (app_prefix_suffix formula-decl nil sorting nil)
    (occurrences def-decl "nat" sorting nil)
    (occurrences_of_app formula-decl nil sorting nil)
    (length_prefix formula-decl nil sorting nil)
    (length_suffix formula-decl nil sorting nil)
    (append def-decl "list[T]" list_props nil)
    (prefix def-decl "list[nat]" sorting nil)
    (suffix def-decl "list[nat]" sorting nil))
   shostak))
 (merge_preserves_sort 0
  (merge_preserves_sort-1 nil 3747853120
   ("" (measure-induct+ "length(l1)+length(l2)" ("l1" "l2"))
    (("" (skeep)
      (("" (expand "merge" 1)
        (("" (lift-if)
          (("" (prop)
            (("1" (grind) nil nil)
             ("2" (case "x!2=null")
              (("1" (replace -1)
                (("1" (rewrite "append_null") (("1" (assert) nil nil))
                  nil))
                nil)
               ("2" (assert) nil nil))
              nil)
             ("3" (inst -2 "cdr(x!1)" "x!2")
              (("3" (inst?)
                (("3" (prop)
                  (("1" (expand "is_sorted_ud?" 1)
                    (("1" (skeep)
                      (("1" (expand "nth" 1)
                        (("1" (lift-if)
                          (("1" (lift-if)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1" (assert) nil nil)
                                 ("2"
                                  (lemma "merge_permutes")
                                  (("2"
                                    (inst -1 "cdr(x!1)" "x!2" "d")
                                    (("2"
                                      (lemma
                                       "permutations_preserve_contents")
                                      (("2"
                                        (inst
                                         -1
                                         "merge(cdr(x!1), x!2, d)"
                                         "append(cdr(x!1), x!2)"
                                         "j-1")
                                        (("1"
                                          (rewrite
                                           "permutations_is_commutative")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (case
                                                 "j_1 < length(cdr(x!1))")
                                                (("1"
                                                  (rewrite
                                                   "nth_append")
                                                  (("1"
                                                    (expand
                                                     "is_sorted_ud?"
                                                     -7)
                                                    (("1"
                                                      (inst
                                                       -7
                                                       "0"
                                                       "j_1+1")
                                                      (("1"
                                                        (expand
                                                         "nth"
                                                         -7)
                                                        (("1"
                                                          (hide-all-but
                                                           (-2 -7 2))
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide-all-but
                                                         (-1 1))
                                                        (("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("3"
                                                        (hide-all-but
                                                         (-1 1))
                                                        (("3"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide-all-but
                                                     (-1 -2))
                                                    (("2"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (use "nth_of_append")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (replaces -1)
                                                      (("1"
                                                        (replace
                                                         -1
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (inst
                                                           -8
                                                           "0"
                                                           "0")
                                                          (("1"
                                                            (expand
                                                             "nth"
                                                             -8)
                                                            (("1"
                                                              (expand
                                                               "is_sorted_ud?"
                                                               -7)
                                                              (("1"
                                                                (inst
                                                                 -7
                                                                 "0"
                                                                 "j_1-length(cdr(x!1))")
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   -7
                                                                   1)
                                                                  (("1"
                                                                    (case
                                                                     "rem(10^(1+d))(car(x!1)) <= rem(10^(1+d))(car(x!2))")
                                                                    (("1"
                                                                      (hide-all-but
                                                                       (-1
                                                                        -8
                                                                        3))
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (hide-all-but
                                                                       (-5
                                                                        -8
                                                                        1))
                                                                      (("2"
                                                                        (case
                                                                         "d_nth(car(x!1), d) * 10^d + rem(10 ^ d)(car(x!1)) = rem(10 ^ (1 + d))(car(x!1))  AND d_nth(car(x!2), d) * 10^d + rem(10 ^ d)(car(x!2)) = rem(10 ^ (1 + d))(car(x!2)) ")
                                                                        (("1"
                                                                          (flatten)
                                                                          (("1"
                                                                            (case
                                                                             "d_nth(car(x!1), d) * 10 ^ d <= d_nth(car(x!2), d) * 10 ^ d")
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil)
                                                                             ("2"
                                                                              (hide-all-but
                                                                               (-3
                                                                                1))
                                                                              (("2"
                                                                                (typepred
                                                                                 "10 ^ d")
                                                                                (("2"
                                                                                  (lemma
                                                                                   "both_sides_times_pos_le1")
                                                                                  (("2"
                                                                                    (inst?)
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (prop)
                                                                          (("1"
                                                                            (rewrite
                                                                             "d_exp_dec")
                                                                            nil
                                                                            nil)
                                                                           ("2"
                                                                            (rewrite
                                                                             "d_exp_dec")
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (1
                                                                    6))
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (hide-all-but
                                                             (1 6))
                                                            (("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil)
                                                           ("3"
                                                            (hide-all-but
                                                             (1 6))
                                                            (("3"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (typepred "j_1")
                                                    (("2"
                                                      (rewrite
                                                       "length_append")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (1 2))
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (typepred "j")
                                  (("3" (assert) nil nil))
                                  nil)
                                 ("4"
                                  (expand "is_sorted_ud?" -1)
                                  (("4"
                                    (inst -1 "i-1" "j-1")
                                    (("1" (assert) nil nil)
                                     ("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-2 1 3 4))
                    (("2" (expand "is_sorted_ud?")
                      (("2" (skeep)
                        (("2" (inst -1 "i+1" "j+1")
                          (("1" (expand "nth" -1)
                            (("1" (propax) nil nil)) nil)
                           ("2" (typepred "j")
                            (("2" (hide-all-but (-1 1 3))
                              (("2" (grind) nil nil)) nil))
                            nil)
                           ("3" (typepred "i")
                            (("3" (hide-all-but (-1 1 3))
                              (("3" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (skeep)
                    (("3" (inst -4 "i+1" "j")
                      (("1" (hide-all-but (-4 1 3))
                        (("1" (expand "nth" -1 1)
                          (("1" (propax) nil nil)) nil))
                        nil)
                       ("2" (typepred "i")
                        (("2" (hide-all-but (-1 1 4))
                          (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil)
                   ("4" (hide-all-but (1 3)) (("4" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil)
             ("4" (inst -1 "x!1" "cdr(x!2)")
              (("4" (inst -1 "d")
                (("4" (prop)
                  (("1" (expand "is_sorted_ud?" 2)
                    (("1" (skeep)
                      (("1" (expand "nth" 2)
                        (("1" (lift-if)
                          (("1" (lift-if)
                            (("1" (lift-if)
                              (("1"
                                (prop)
                                (("1" (assert) nil nil)
                                 ("2"
                                  (lemma "merge_permutes")
                                  (("2"
                                    (inst -1 "x!1" "cdr(x!2)" "d")
                                    (("2"
                                      (lemma
                                       "permutations_preserve_contents")
                                      (("2"
                                        (inst
                                         -1
                                         "merge(x!1, cdr(x!2), d)"
                                         "append(x!1, cdr(x!2))"
                                         "j-1")
                                        (("1"
                                          (rewrite
                                           "permutations_is_commutative")
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skeep)
                                              (("1"
                                                (use "nth_of_append")
                                                (("1"
                                                  (lift-if)
                                                  (("1"
                                                    (prop)
                                                    (("1"
                                                      (replaces -2)
                                                      (("1"
                                                        (replaces
                                                         -2
                                                         :dir
                                                         rl)
                                                        (("1"
                                                          (expand
                                                           "is_sorted_ud?"
                                                           -5)
                                                          (("1"
                                                            (inst
                                                             -5
                                                             "0"
                                                             "j_1")
                                                            (("1"
                                                              (expand
                                                               "nth"
                                                               -5
                                                               1)
                                                              (("1"
                                                                (case
                                                                 "rem(10 ^ (1 + d))(car(x!2)) < rem(10 ^ (1 + d))(car(x!1))")
                                                                (("1"
                                                                  (hide-all-but
                                                                   (-1
                                                                    -6
                                                                    2))
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (hide-all-but
                                                                   (1
                                                                    4))
                                                                  (("2"
                                                                    (case
                                                                     "d_nth(car(x!1), d) > d_nth(car(x!2), d)")
                                                                    (("1"
                                                                      (rewrite
                                                                       "d_exp_dec"
                                                                       :dir
                                                                       rl)
                                                                      (("1"
                                                                        (rewrite
                                                                         "d_exp_dec"
                                                                         :dir
                                                                         rl)
                                                                        (("1"
                                                                          (typepred
                                                                           "rem(10 ^ d)(car(x!2))"
                                                                           "rem(10 ^ d)(car(x!1))")
                                                                          (("1"
                                                                            (assert)
                                                                            (("1"
                                                                              (case
                                                                               "d_nth(car(x!2), d) * 10 ^ d < d_nth(car(x!1), d) * 10 ^ d")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (case
                                                                                   "(rem(10 ^ d)(car(x!2)) + d_nth(car(x!2), d) * 10 ^ d) / 10^d <
       (rem(10 ^ d)(car(x!1)) + d_nth(car(x!1), d) * 10 ^ d) / 10^d")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (typepred
                                                                                       "10^d")
                                                                                      (("1"
                                                                                        (hide-all-but
                                                                                         (-1
                                                                                          -2
                                                                                          1))
                                                                                        (("1"
                                                                                          (name-replace
                                                                                           "dad"
                                                                                           "10 ^ d")
                                                                                          (("1"
                                                                                            (name-replace
                                                                                             "m"
                                                                                             "(rem(dad)(car(x!2)) + d_nth(car(x!2), d) * dad)")
                                                                                            (("1"
                                                                                              (name-replace
                                                                                               "M"
                                                                                               "rem(dad)(car(x!1)) + d_nth(car(x!1), d) * dad")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "dad * (m / dad) < dad * (M / dad)")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (rewrite
                                                                                                     "both_sides_times_pos_lt2")
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide-all-but
                                                                                     (-6
                                                                                      -2
                                                                                      -4
                                                                                      1))
                                                                                    (("2"
                                                                                      (case
                                                                                       "(rem(10 ^ d)(car(x!2)) + d_nth(car(x!2), d) * 10 ^ d) / 10 ^ d = (rem(10 ^ d)(car(x!2))/ 10 ^ d + d_nth(car(x!2), d)) ")
                                                                                      (("1"
                                                                                        (replaces
                                                                                         -1)
                                                                                        (("1"
                                                                                          (case
                                                                                           " (rem(10 ^ d)(car(x!1)) + d_nth(car(x!1), d) * 10 ^ d) / 10 ^ d =
(rem(10 ^ d)(car(x!1)) / 10 ^ d + d_nth(car(x!1), d) )")
                                                                                          (("1"
                                                                                            (replaces
                                                                                             -1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (case
                                                                                                 "rem(10 ^ d)(car(x!2)) / 10 ^ d < 1")
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "rem(10 ^ d)(car(x!1)) / 10 ^ d < 1")
                                                                                                  (("1"
                                                                                                    (assert)
                                                                                                    nil
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (hide-all-but
                                                                                                     (-3
                                                                                                      1))
                                                                                                    (("2"
                                                                                                      (lemma
                                                                                                       "both_sides_times_pos_lt2")
                                                                                                      (("2"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "10 ^ d"
                                                                                                         " rem(10 ^ d)(car(x!1)) / 10^d"
                                                                                                         " 1")
                                                                                                        (("2"
                                                                                                          (assert)
                                                                                                          nil
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (hide-all-but
                                                                                                   (1
                                                                                                    -1))
                                                                                                  (("2"
                                                                                                    (lemma
                                                                                                     "both_sides_times_pos_lt2")
                                                                                                    (("2"
                                                                                                      (inst
                                                                                                       -1
                                                                                                       "10 ^ d"
                                                                                                       " rem(10 ^ d)(car(x!2)) / 10^d"
                                                                                                       " 1")
                                                                                                      (("2"
                                                                                                        (assert)
                                                                                                        nil
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (assert)
                                                                                            nil
                                                                                            nil))
                                                                                          nil))
                                                                                        nil)
                                                                                       ("2"
                                                                                        (assert)
                                                                                        nil
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (hide-all-but
                                                                                 (-5
                                                                                  1))
                                                                                (("2"
                                                                                  (lemma
                                                                                   "both_sides_times_pos_lt2")
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "10 ^ d"
                                                                                     "d_nth(car(x!2), d)"
                                                                                     "d_nth(car(x!1), d)")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (1 5))
                                                              (("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (replaces -1)
                                                      (("2"
                                                        (replaces
                                                         -1
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (expand
                                                           "is_sorted_ud?"
                                                           -5)
                                                          (("2"
                                                            (inst
                                                             -5
                                                             "0"
                                                             "j_1-length(x!1)+1")
                                                            (("1"
                                                              (hide-all-but
                                                               (1
                                                                -5
                                                                3
                                                                6))
                                                              (("1"
                                                                (typepred
                                                                 "j_1")
                                                                (("1"
                                                                  (expand
                                                                   "nth"
                                                                   -2)
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide-all-but
                                                               (1
                                                                2
                                                                6
                                                                7))
                                                              (("2"
                                                                (typepred
                                                                 "j_1")
                                                                (("2"
                                                                  (rewrite
                                                                   "length_append")
                                                                  (("2"
                                                                    (grind)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("3"
                                                              (hide-all-but
                                                               (1 7))
                                                              (("3"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "j_1")
                                                  (("2"
                                                    (hide-all-but
                                                     (-1 1 6))
                                                    (("2"
                                                      (rewrite
                                                       "length_append")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil)
                                         ("2"
                                          (hide-all-but (1 2))
                                          (("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("3"
                                  (typepred "j")
                                  (("3"
                                    (hide-all-but (-2 -3 2))
                                    (("3" (assert) nil nil))
                                    nil))
                                  nil)
                                 ("4"
                                  (hide-all-but (-1 1 2 3 6))
                                  (("4"
                                    (expand "is_sorted_ud?")
                                    (("4"
                                      (inst -1 "i-1" "j-1")
                                      (("1" (assert) nil nil)
                                       ("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (hide-all-but (-2 1 5))
                    (("2" (expand "is_sorted_ud?")
                      (("2" (skeep)
                        (("2" (inst -1 "i+1" "j+1")
                          (("1" (expand "nth" -1)
                            (("1" (propax) nil nil)) nil)
                           ("2" (typepred "j")
                            (("2" (hide-all-but (-1 1 3))
                              (("2" (grind) nil nil)) nil))
                            nil)
                           ("3" (typepred "i")
                            (("3" (hide-all-but (-1 1 3))
                              (("3" (grind) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (hide-all-but (-3 1 5))
                    (("3" (skeep)
                      (("3" (inst -1 "i" "j+1")
                        (("1" (expand "nth" -1 2)
                          (("1" (propax) nil nil)) nil)
                         ("2" (typepred "j")
                          (("2" (hide-all-but (-1 1 3))
                            (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("4" (hide-all-but (1 5)) (("4" (grind) nil nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((permutations_preserve_contents formula-decl nil sorting nil)
    (permutations_is_commutative formula-decl nil sorting nil)
    (nth_of_append formula-decl nil sorting nil)
    (length_append formula-decl nil list_props nil)
    (nth_append formula-decl nil sorting nil)
    (append_null formula-decl nil list_props nil)
    (append def-decl "list[T]" list_props nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil))
   shostak))
 (merge_sort_d_sorts 3
  (try_dc4 "" 3750895726
   ("" (measure-induct+ "length(l)" ("l"))
    (("" (skeep)
      (("" (expand merge_sort 1)
        (("" (lift-if 1)
          (("" (prop)
            (("1" (expand is_sorted_ud?) (("1" (assert) nil nil)) nil)
             ("2" (lemma merge_preserves_sort)
              (("2" (lemma length_prefix)
                (("2" (lemma length_suffix)
                  (("2"
                    (name-replace "halflen" "floor(length(x!1) / 2)")
                    (("2" (name-replace "pref" "prefix(x!1, halflen)")
                      (("2"
                        (name-replace "suff" "suffix(x!1, halflen)")
                        (("2" (reveal -1 -2 -3)
                          (("2" (inst -4 x!1 halflen)
                            (("2" (inst -5 x!1 halflen)
                              (("2"
                                (lemma contents_prefix)
                                (("2"
                                  (lemma contents_suffix)
                                  (("2"
                                    (inst
                                     -8
                                     "merge_sort(pref, d)"
                                     "merge_sort(pref, d)"
                                     d)
                                    (("2" (postpone) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (try_dc3 "inst merge" 3750888008
   ("" (measure-induct+ "length(l)" ("l"))
    (("" (skeep)
      (("" (expand merge_sort 1)
        (("" (lift-if 1)
          (("" (prop)
            (("1" (expand is_sorted_ud?) (("1" (assert) nil nil)) nil)
             ("2" (lemma merge_preserves_sort)
              (("2"
                (name-replace "halflen_x1" "floor(length(x!1) / 2)")
                (("2"
                  (name-replace "pref_x1" "prefix(x!1, halflen_x1)")
                  (("2"
                    (name-replace "suff_x1" "suffix(x!1, halflen_x1)")
                    (("2" (reveal -1 -2 -3)
                      (("2"
                        (inst -4 "merge_sort(pref_x1, d)"
                         "merge_sort(suff_x1, d)" d)
                        (("2" (lemma contents_prefix)
                          (("2" (lemma contents_suffix)
                            (("2" (lemma length_prefix)
                              (("2"
                                (lemma length_suffix)
                                (("2"
                                  (split -8)
                                  (("1" (grind) nil nil)
                                   ("2"
                                    (hide -1 -3 -5 2 3)
                                    (("2"
                                      (inst -1 x!1 halflen_x1)
                                      (("2"
                                        (inst -5 pref_x1)
                                        (("2"
                                          (inst -5 d)
                                          (("2"
                                            (split -5)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (copy -2)
                                                (("2"
                                                  (expand
                                                   is_sorted_ud?)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       x!1
                                                       halflen_x1
                                                       i)
                                                      (("1"
                                                        (inst
                                                         -3
                                                         x!1
                                                         halflen_x1
                                                         j)
                                                        (("1"
                                                          (inst -6 i j)
                                                          (("1"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("3"
                                    (hide -2 -4 -6 2 3)
                                    (("3"
                                      (inst -1 x!1 halflen_x1)
                                      (("3"
                                        (inst -5 suff_x1)
                                        (("3"
                                          (inst -5 d)
                                          (("3"
                                            (split -5)
                                            (("1" (propax) nil nil)
                                             ("2"
                                              (hide 2)
                                              (("2"
                                                (copy -2)
                                                (("2"
                                                  (expand
                                                   is_sorted_ud?)
                                                  (("2"
                                                    (skeep)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       x!1
                                                       halflen_x1
                                                       i)
                                                      (("1"
                                                        (inst
                                                         -3
                                                         x!1
                                                         halflen_x1
                                                         j)
                                                        (("1"
                                                          (inst
                                                           -6
                                                           "i + halflen_x1"
                                                           "j + halflen_x1")
                                                          (("1"
                                                            (replace
                                                             -4
                                                             (-1 -3))
                                                            (("1"
                                                              (replaces)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (grind)
                                                          nil
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("4"
                                    (skeep)
                                    (("4"
                                      (lemma app_prefix_suffix)
                                      (("4"
                                        (lemma
                                         nth_of_list_is_nth_append_list)
                                        (("4"
                                          (hide 2 3)
                                          (("4"
                                            (copy -10)
                                            (("4"
                                              (hide -11)
                                              (("4"
                                                (copy -1)
                                                (("4"
                                                  (inst -1 pref_x1)
                                                  (("4"
                                                    (inst -1 d)
                                                    (("4"
                                                      (inst -2 suff_x1)
                                                      (("4"
                                                        (inst -2 d)
                                                        (("4"
                                                          (inst
                                                           -4
                                                           x!1
                                                           halflen_x1)
                                                          (("4"
                                                            (replace
                                                             -10
                                                             -4)
                                                            (("4"
                                                              (replace
                                                               -9
                                                               -4)
                                                              (("4"
                                                                (split
                                                                 -1)
                                                                (("1"
                                                                  (postpone)
                                                                  nil
                                                                  nil)
                                                                 ("2"
                                                                  (hide
                                                                   -1
                                                                   -2
                                                                   -4
                                                                   -6
                                                                   2)
                                                                  (("2"
                                                                    (expand
                                                                     is_sorted_ud?)
                                                                    (("2"
                                                                      (skeep)
                                                                      (("2"
                                                                        (inst
                                                                         -7
                                                                         i!1
                                                                         j!1)
                                                                        (("1"
                                                                          (copy
                                                                           -3)
                                                                          (("1"
                                                                            (inst
                                                                             -3
                                                                             x!1
                                                                             halflen_x1)
                                                                            (("1"
                                                                              (inst
                                                                               -4
                                                                               x!1
                                                                               halflen_x1
                                                                               j!1)
                                                                              (("1"
                                                                                (inst
                                                                                 -1
                                                                                 x!1
                                                                                 halflen_x1
                                                                                 i!1)
                                                                                (("1"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil)
                                                                                 ("2"
                                                                                  (grind)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (grind)
                                                                          nil
                                                                          nil)
                                                                         ("3"
                                                                          (inst
                                                                           -2
                                                                           x!1
                                                                           halflen_x1)
                                                                          (("3"
                                                                            (grind)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("3"
                                                                  (inst
                                                                   -5
                                                                   x!1
                                                                   halflen_x1)
                                                                  (("3"
                                                                    (replace
                                                                     -9
                                                                     -5)
                                                                    (("3"
                                                                      (typepred
                                                                       halflen_x1)
                                                                      (("3"
                                                                        (replace
                                                                         -8
                                                                         1)
                                                                        (("3"
                                                                          (expand
                                                                           length
                                                                           1)
                                                                          (("3"
                                                                            (lift-if)
                                                                            (("3"
                                                                              (prop)
                                                                              (("1"
                                                                                (postpone)
                                                                                nil
                                                                                nil)
                                                                               ("2"
                                                                                (postpone)
                                                                                nil
                                                                                nil)
                                                                               ("3"
                                                                                (postpone)
                                                                                nil
                                                                                nil)
                                                                               ("4"
                                                                                (postpone)
                                                                                nil
                                                                                nil)
                                                                               ("5"
                                                                                (postpone)
                                                                                nil
                                                                                nil)
                                                                               ("6"
                                                                                (postpone)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (try_dc2 "" 3750882388
   ("" (measure-induct+ "length(l)" ("l"))
    (("" (skeep)
      (("" (expand merge_sort 1)
        (("" (lift-if 1)
          (("" (prop)
            (("1" (expand is_sorted_ud?) (("1" (assert) nil nil)) nil)
             ("2" (lemma merge_preserves_sort)
              (("2"
                (name-replace "halflen_x1" "floor(length(x!1) / 2)")
                (("2"
                  (name-replace "pref_x1" "prefix(x!1, halflen_x1)")
                  (("2"
                    (name-replace "suff_x1" "suffix(x!1, halflen_x1)")
                    (("2" (reveal -1 -2 -3)
                      (("2" (copy -4)
                        (("2" (inst -1 pref_x1 suff_x1 d)
                          (("2" (split -1)
                            (("1" (postpone) nil nil)
                             ("2" (postpone) nil nil)
                             ("3" (postpone) nil nil)
                             ("4" (skeep)
                              (("4"
                                (lemma app_prefix_suffix)
                                (("4"
                                  (inst -1 x!1 halflen_x1)
                                  (("4"
                                    (replace -2 -1)
                                    (("4"
                                      (replace -3 -1)
                                      (("4"
                                        (lemma contents_suffix)
                                        (("4"
                                          (inst -1 x!1 halflen_x1 j)
                                          (("1"
                                            (replace -3 -1)
                                            (("1"
                                              (expand is_sorted_ud? -8)
                                              (("1"
                                                (replace -1 1)
                                                (("1"
                                                  (lemma
                                                   contents_prefix)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     x!1
                                                     halflen_x1
                                                     i)
                                                    (("1"
                                                      (replace -5 -1)
                                                      (("1"
                                                        (replace -1 1)
                                                        (("1"
                                                          (inst
                                                           -9
                                                           i
                                                           "j + halflen_x1")
                                                          (("1"
                                                            (hide
                                                             -7
                                                             -8)
                                                            (("1"
                                                              (typepred
                                                               i)
                                                              (("1"
                                                                (typepred
                                                                 j)
                                                                (("1"
                                                                  (expand
                                                                   suff_x1
                                                                   -1)
                                                                  (("1"
                                                                    (expand
                                                                     pref_x1
                                                                     -2)
                                                                    (("1"
                                                                      (lemma
                                                                       length_prefix)
                                                                      (("1"
                                                                        (lemma
                                                                         length_suffix)
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           x!1
                                                                           halflen_x1)
                                                                          (("1"
                                                                            (inst
                                                                             -2
                                                                             x!1
                                                                             halflen_x1)
                                                                            (("1"
                                                                              (assert)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (typepred i)
                                                      (("2"
                                                        (expand
                                                         pref_x1
                                                         -1)
                                                        (("2"
                                                          (lemma
                                                           length_prefix)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             x!1
                                                             halflen_x1)
                                                            (("2"
                                                              (assert)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("2"
                                            (typepred j)
                                            (("2"
                                              (expand suff_x1 -1)
                                              (("2"
                                                (lemma length_suffix)
                                                (("2"
                                                  (inst
                                                   -1
                                                   x!1
                                                   halflen_x1)
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (try_dc1 "try1" 3750864037
   ("" (measure-induct+ "length(l)" ("l"))
    (("" (skeep)
      (("" (expand merge_sort 1)
        (("" (lift-if 1)
          (("" (prop)
            (("1" (expand is_sorted_ud?) (("1" (assert) nil nil)) nil)
             ("2" (lemma merge_preserves_sort)
              (("2"
                (name-replace "upper_half_x1"
                 "prefix(x!1, floor(length(x!1) / 2))" NIL)
                (("2" (reveal -1)
                  (("2"
                    (name-replace "lower_half_x1"
                     "suffix(x!1, floor(length(x!1) / 2))")
                    (("2" (reveal -1)
                      (("2"
                        (inst -3 "merge_sort(upper_half_x1, d)"
                         "merge_sort(lower_half_x1, d)" d)
                        (("2" (assert)
                          (("2" (split 1)
                            (("1" (inst -3 upper_half_x1)
                              (("1"
                                (inst -3 d)
                                (("1"
                                  (lemma length_prefix)
                                  (("1"
                                    (inst
                                     -1
                                     "x!1"
                                     "floor(length(x!1) / 2)")
                                    (("1"
                                      (assert)
                                      (("1"
                                        (hide -1 -2 1 2 3)
                                        (("1"
                                          (expand is_sorted_ud?)
                                          (("1"
                                            (skeep)
                                            (("1"
                                              (expand upper_half_x1)
                                              (("1"
                                                (hide -1)
                                                (("1"
                                                  (lemma
                                                   contents_prefix)
                                                  (("1"
                                                    (copy -1)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       x!1
                                                       "floor(length(x!1) / 2)"
                                                       i)
                                                      (("1"
                                                        (inst
                                                         -2
                                                         x!1
                                                         "floor(length(x!1) / 2)"
                                                         j)
                                                        (("1"
                                                          (replace
                                                           -1
                                                           1)
                                                          (("1"
                                                            (replace
                                                             -2
                                                             1)
                                                            (("1"
                                                              (inst
                                                               -3
                                                               i
                                                               j)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (inst -3 lower_half_x1)
                              (("2"
                                (inst -3 d)
                                (("2"
                                  (lemma length_suffix)
                                  (("2"
                                    (inst
                                     -1
                                     "x!1"
                                     "floor(length(x!1) / 2)")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (hide -1 -3 1 2 3)
                                        (("2"
                                          (expand is_sorted_ud?)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (expand lower_half_x1)
                                              (("2"
                                                (hide -1)
                                                (("2"
                                                  (lemma
                                                   contents_suffix)
                                                  (("2"
                                                    (copy -1)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       x!1
                                                       "floor(length(x!1) / 2)"
                                                       i)
                                                      (("2"
                                                        (inst
                                                         -2
                                                         x!1
                                                         "floor(length(x!1) / 2)"
                                                         j)
                                                        (("2"
                                                          (replace
                                                           -1
                                                           1)
                                                          (("2"
                                                            (replace
                                                             -2
                                                             1)
                                                            (("2"
                                                              (inst
                                                               -3
                                                               "i + floor(length(x!1) / 2)"
                                                               "j + floor(length(x!1) / 2)")
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (skeep)
                              (("3"
                                (hide -1 -2 2 3)
                                (("3"
                                  (copy -1)
                                  (("3"
                                    (reveal -2 -3)
                                    (("3"
                                      (inst -3 lower_half_x1)
                                      (("3"
                                        (inst -3 d)
                                        (("3"
                                          (inst -4 upper_half_x1)
                                          (("3"
                                            (inst -4 d)
                                            (("3"
                                              (split -3)
                                              (("1"
                                                (lemma length_prefix)
                                                (("1"
                                                  (split -5)
                                                  (("1"
                                                    (lemma
                                                     app_prefix_suffix)
                                                    (("1"
                                                      (inst
                                                       -1
                                                       x!1
                                                       "floor(length(x!1) / 2)")
                                                      (("1"
                                                        (replace -5 -1)
                                                        (("1"
                                                          (replace
                                                           -6
                                                           -1)
                                                          (("1"
                                                            (hide -3)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (expand
                                                                 is_sorted_ud?)
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (lemma
                                                                     contents_prefix)
                                                                    (("1"
                                                                      (lemma
                                                                       contents_suffix)
                                                                      (("1"
                                                                        (inst
                                                                         -1
                                                                         x!1
                                                                         "floor(length(x!1) / 2)"
                                                                         j)
                                                                        (("1"
                                                                          (inst
                                                                           -2
                                                                           x!1
                                                                           "floor(length(x!1) / 2)"
                                                                           i)
                                                                          (("1"
                                                                            (replace
                                                                             -7
                                                                             -2)
                                                                            (("1"
                                                                              (replace
                                                                               -6
                                                                               -1)
                                                                              (("1"
                                                                                (inst
                                                                                 -4
                                                                                 i
                                                                                 j)
                                                                                (("1"
                                                                                  (inst
                                                                                   -5
                                                                                   i
                                                                                   j)
                                                                                  (("1"
                                                                                    (postpone)
                                                                                    nil
                                                                                    nil)
                                                                                   ("2"
                                                                                    (postpone)
                                                                                    nil
                                                                                    nil)
                                                                                   ("3"
                                                                                    (postpone)
                                                                                    nil
                                                                                    nil))
                                                                                  nil)
                                                                                 ("2"
                                                                                  (postpone)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (postpone)
                                                                            nil
                                                                            nil))
                                                                          nil)
                                                                         ("2"
                                                                          (postpone)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (hide -2 -3 2)
                                                    (("2"
                                                      (lemma
                                                       contents_prefix)
                                                      (("2"
                                                        (expand
                                                         is_sorted_ud?)
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (copy -1)
                                                            (("2"
                                                              (inst
                                                               -1
                                                               x!1
                                                               "floor(length(x!1) / 2)"
                                                               i!1)
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 x!1
                                                                 "floor(length(x!1) / 2)"
                                                                 j!1)
                                                                (("1"
                                                                  (inst
                                                                   -5
                                                                   i!1
                                                                   j!1)
                                                                  (("1"
                                                                    (replaces)
                                                                    (("1"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   j!1)
                                                                  (("2"
                                                                    (inst
                                                                     -4
                                                                     x!1
                                                                     "floor(length(x!1) / 2)")
                                                                    (("2"
                                                                      (replace
                                                                       -5
                                                                       -4)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (hide
                                                                 -1
                                                                 -4
                                                                 2)
                                                                (("2"
                                                                  (typepred
                                                                   i!1)
                                                                  (("2"
                                                                    (inst
                                                                     -2
                                                                     x!1
                                                                     "floor(length(x!1) / 2)")
                                                                    (("2"
                                                                      (replace
                                                                       -3
                                                                       -2)
                                                                      (("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("3"
                                                    (inst
                                                     -1
                                                     x!1
                                                     "floor(length(x!1) / 2)")
                                                    (("3"
                                                      (replace -4 -1)
                                                      (("3"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2"
                                                (hide -3 2)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (lemma
                                                     contents_suffix)
                                                    (("2"
                                                      (name-replace
                                                       "half"
                                                       "floor(length(x!1)/2)")
                                                      (("2"
                                                        (reveal -1)
                                                        (("2"
                                                          (expand
                                                           is_sorted_ud?)
                                                          (("2"
                                                            (skeep)
                                                            (("2"
                                                              (copy -2)
                                                              (("2"
                                                                (inst
                                                                 -1
                                                                 x!1
                                                                 half
                                                                 i!1)
                                                                (("1"
                                                                  (inst
                                                                   -3
                                                                   x!1
                                                                   half
                                                                   j!1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (inst
                                                                       -6
                                                                       "half + i!1"
                                                                       "half + j!1")
                                                                      (("1"
                                                                        (assert)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (typepred
                                                                     j!1)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (hide
                                                                         -7
                                                                         2)
                                                                        (("2"
                                                                          (lemma
                                                                           length_suffix)
                                                                          (("2"
                                                                            (inst
                                                                             -1
                                                                             x!1
                                                                             half)
                                                                            (("2"
                                                                              (replace
                                                                               -6
                                                                               -1)
                                                                              (("2"
                                                                                (grind)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   i!1)
                                                                  (("2"
                                                                    (lemma
                                                                     length_suffix)
                                                                    (("2"
                                                                      (inst
                                                                       -1
                                                                       x!1
                                                                       half)
                                                                      (("2"
                                                                        (replace
                                                                         -5
                                                                         -1)
                                                                        (("2"
                                                                          (grind)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("3"
                                                (lemma length_suffix)
                                                (("3"
                                                  (inst
                                                   -1
                                                   x!1
                                                   "floor(length(x!1) / 2)")
                                                  (("3"
                                                    (replace -2 -1)
                                                    (("3"
                                                      (grind)
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (try_dc "" 3750862898
   ("" (measure-induct+ "length(l)" ("l")) (("" (postpone) nil nil))
    nil)
   nil shostak)
  (try3 "Simplifica tentativa anterior" 3750425603
   ("" (measure-induct+ "length(l)" ("l"))
    (("" (skolem 1 "d")
      (("" (lemma "merge_preserves_sort")
        (("" (prop)
          (("" (expand "merge_sort" 1)
            (("" (lift-if)
              (("" (prop)
                (("1" (grind) nil nil)
                 ("2" (hide 1)
                  (("2" (inst -2 "prefix(x!1, floor(length(x!1) / 2))")
                    (("2" (inst -2 "d")
                      (("2" (reveal -2)
                        (("2"
                          (inst -1
                           "suffix(x!1, floor(length(x!1) / 2))")
                          (("2" (inst -1 "d")
                            (("2" (rewrite "length_suffix")
                              (("2"
                                (rewrite "length_prefix")
                                (("2"
                                  (assert)
                                  (("2"
                                    (inst
                                     -2
                                     "prefix(x!1, floor(length(x!1) / 2))"
                                     "suffix(x!1, floor(length(x!1) / 2))"
                                     "d")
                                    (("2"
                                      (reveal -1)
                                      (("2"
                                        (inst
                                         -1
                                         "merge_sort(prefix(x!1, floor(length(x!1) / 2)), d)"
                                         "merge_sort(suffix(x!1, floor(length(x!1) / 2)), d)"
                                         "d")
                                        (("2"
                                          (split -4)
                                          (("1"
                                            (split -3)
                                            (("1"
                                              (hide -4)
                                              (("1"
                                                (split -3)
                                                (("1" (propax) nil nil)
                                                 ("2" (propax) nil nil)
                                                 ("3" (propax) nil nil)
                                                 ("4"
                                                  (skeep)
                                                  (("4"
                                                    (expand
                                                     "is_sorted_ud?"
                                                     -3)
                                                    (("4"
                                                      (hide 2)
                                                      (("4"
                                                        (lemma
                                                         "contents_suffix")
                                                        (("4"
                                                          (lemma
                                                           "contents_prefix")
                                                          (("4"
                                                            (expand
                                                             "is_sorted_ud?"
                                                             -3)
                                                            (("4"
                                                              (expand
                                                               "is_sorted_ud?"
                                                               -4)
                                                              (("4"
                                                                (inst
                                                                 -5
                                                                 "i"
                                                                 "j")
                                                                (("1"
                                                                  (lemma
                                                                   "app_prefix_suffix")
                                                                  (("1"
                                                                    (inst
                                                                     -5
                                                                     "i"
                                                                     "j")
                                                                    (("1"
                                                                      (inst
                                                                       -4
                                                                       "i"
                                                                       "j")
                                                                      (("1"
                                                                        (assert)
                                                                        (("1"
                                                                          (reveal
                                                                           -3)
                                                                          (("1"
                                                                            (hide
                                                                             -1
                                                                             -2
                                                                             -3
                                                                             -4
                                                                             -5
                                                                             -6)
                                                                            (("1"
                                                                              (reveal
                                                                               -1
                                                                               -2
                                                                               -3)
                                                                              (("1"
                                                                                (lemma
                                                                                 "merge_sort_permutes")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "x!1"
                                                                                   "d")
                                                                                  (("1"
                                                                                    (inst
                                                                                     -2
                                                                                     "x!1"
                                                                                     "floor(length(x!1)/2)")
                                                                                    (("1"
                                                                                      (postpone)
                                                                                      nil
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (postpone)
                                                                        nil
                                                                        nil)
                                                                       ("3"
                                                                        (postpone)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (postpone)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (postpone)
                                                                  nil
                                                                  nil)
                                                                 ("3"
                                                                  (postpone)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide -1 -2 -3 2)
                                              (("2"
                                                (lemma "length_suffix")
                                                (("2"
                                                  (inst
                                                   -1
                                                   "x!1"
                                                   "floor(length(x!1) / 2)")
                                                  (("2"
                                                    (lemma
                                                     "contents_suffix")
                                                    (("2"
                                                      (lemma
                                                       "app_prefix_suffix")
                                                      (("2"
                                                        (expand
                                                         "is_sorted_ud?")
                                                        (("2"
                                                          (skeep)
                                                          (("2"
                                                            (inst
                                                             -4
                                                             "i"
                                                             "j")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "x!1"
                                                               "floor(length(x!1) / 2)")
                                                              (("1"
                                                                (inst
                                                                 -2
                                                                 "x!1"
                                                                 "floor(length(x!1) / 2)"
                                                                 "i")
                                                                (("1"
                                                                  (lemma
                                                                   "contents_suffix")
                                                                  (("1"
                                                                    (postpone)
                                                                    nil
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (grind)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil)
                                                             ("3"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("3" (grind) nil nil))
                                            nil)
                                           ("2"
                                            (hide -1 -2 -3 2)
                                            (("2"
                                              (typepred
                                               "prefix(x!1, floor(length(x!1) / 2))")
                                              (("2"
                                                (lemma length_prefix)
                                                (("2"
                                                  (inst
                                                   -1
                                                   "x!1"
                                                   "floor(length(x!1) / 2)")
                                                  (("2"
                                                    (hide -2)
                                                    (("2"
                                                      (lemma
                                                       "contents_prefix")
                                                      (("2"
                                                        (lemma
                                                         "app_prefix_suffix")
                                                        (("2"
                                                          (hide -2)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "x!1"
                                                             "floor(length(x!1) / 2)")
                                                            (("2"
                                                              (expand
                                                               "is_sorted_ud?")
                                                              (("2"
                                                                (skeep)
                                                                (("2"
                                                                  (lemma
                                                                   "contents_prefix")
                                                                  (("2"
                                                                    (inst
                                                                     -1
                                                                     "x!1"
                                                                     "floor(length(x!1) / 2)"
                                                                     "i")
                                                                    (("1"
                                                                      (inst
                                                                       -4
                                                                       "i"
                                                                       "j")
                                                                      (("1"
                                                                        (lemma
                                                                         "contents_prefix")
                                                                        (("1"
                                                                          (inst
                                                                           -1
                                                                           "x!1"
                                                                           "floor(length(x!1) / 2)"
                                                                           "j")
                                                                          (("1"
                                                                            (replace
                                                                             -1
                                                                             1)
                                                                            (("1"
                                                                              (replace
                                                                               -2
                                                                               1)
                                                                              (("1"
                                                                                (propax)
                                                                                nil
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (assert)
                                                                            nil
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (grind)
                                                                        nil
                                                                        nil))
                                                                      nil)
                                                                     ("2"
                                                                      (grind)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil)
                                           ("3" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (anothertry "" 3750412928
   ("" (measure-induct+ "length(l)" ("l"))
    (("" (skolem 1 "d")
      (("" (lemma "merge_preserves_sort")
        (("" (assert)
          (("" (expand "merge_sort" 1)
            (("" (expand "prefix" 1)
              (("" (expand "suffix" 1)
                (("" (prop)
                  (("" (lift-if)
                    (("" (prop)
                      (("1" (grind) nil nil) ("2" (grind) nil nil)
                       ("3" (expand "merge" 2)
                        (("3" (lift-if) (("3" (postpone) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   nil shostak)
  (merge_sort_d_sorts-1 nil 3747760065
   ("" (measure-induct+ "length(l)" ("l"))
    (("" (skolem 1 "dec") (("" (postpone) nil nil)) nil)) nil)
   ((permutations_preserve_contents formula-decl nil sorting nil)
    (contents_prefix formula-decl nil sorting nil)
    (length_prefix formula-decl nil sorting nil)
    (length_suffix formula-decl nil sorting nil)
    (contents_suffix formula-decl nil sorting nil)
    (permutations_is_commutative formula-decl nil sorting nil)
    (suffix def-decl "list[nat]" sorting nil)
    (prefix def-decl "list[nat]" sorting nil)
    (nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil))
   shostak))
 (radix_sort_d_sort 0
  (radix_sort_d_sort-1 nil 3747848399
   ("" (measure-induct+ "k-d" ("k" "d")) (("" (postpone) nil nil)) nil)
   nil shostak))
 (radixsort_permutes 0
  (radixsort_permutes-1 nil 3748006034
   ("" (measure-induct+ "k-d" ("k" "d")) (("" (postpone) nil nil)) nil)
   ((permutations_is_transitive formula-decl nil sorting nil)
    (permutations const-decl "bool" sorting nil))
   nil))
 (rem_max_digits 0
  (rem_max_digits-1 nil 3748007636
   ("" (skeep) (("" (postpone) nil nil)) nil)
   ((nth def-decl "T" list_props nil)
    (length def-decl "nat" list_props nil))
   shostak))
 (radixsort_permutes2 0
  (radixsort_permutes2-1 nil 3747666658
   ("" (skeep) (("" (postpone) nil nil)) nil)
   ((permutations const-decl "bool" sorting nil)
    (length def-decl "nat" list_props nil))
   shostak))
 (Radixsort_sorts 0
  (Radixsort_sorts-1 nil 3748006538
   ("" (skeep) (("" (postpone) nil nil)) nil)
   ((permutations_preserve_contents formula-decl nil sorting nil)
    (permutations_is_commutative formula-decl nil sorting nil)
    (length def-decl "nat" list_props nil)
    (is_sorted? const-decl "bool" sorting nil)
    (nth def-decl "T" list_props nil))
   shostak)))

